@model ErrorViewModel

@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@{
    ViewData["Title"] = "Error";
    Layout = "~/Views/Shared/_LayoutStudent.cshtml";
}



@*<h1 class="text-danger">Error.</h1>*@
<h2 class="text-danger">An error occurred while processing your request.</h2>
@if (Model != null)
{
    if (Model.ShowRequestId)
    {
        <p>
            <strong>Request ID:</strong> <code>@Model.RequestId</code>
        </p>
    }
}
@*<div>
        @if (ViewBag.ExceptionPath != null)
        {
            <p>@ViewBag.ExceptionPath</p>
        }
        @if (ViewBag.ExceptionMessage != null)
        {
            <p>@ViewBag.ExceptionMessage</p>
        }
        @if (ViewBag.StackTrace != null)
        {
            <p>@ViewBag.StackTrace</p>
        }

    </div>*@

@*<h3>Development Mode</h3>
    <p>
        Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
    </p>
    <p>
        <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
        It can result in displaying sensitive information from exceptions to end users.
        For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
        and restarting the app.
    </p>*@



<div class="row">
    <div class="col-md-12 text-center">
        @if (signInManager.IsSignedIn(User))
        {
            @if (User.IsInRole("Admin") || User.IsInRole("SuperAdmin") || User.IsInRole("Accounts") || User.IsInRole("Teacher"))
            {
                <a asp-action="Index" asp-controller="Home" class="btn btn-info">Back to Home</a>
            }            
        }
        else
        {
            <a asp-action="Search" asp-controller="Students" class="btn btn-info">Back to Search</a>
        }
    </div>
</div>